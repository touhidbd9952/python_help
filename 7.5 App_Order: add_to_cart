My_Ecom_Project
|----App_Login
|----App_Shop
|----App_Order
|----App_Payment
|----media
|      |---Products
|      |---Profile_pic
|----static
|      |---css
|      |---js
|----templates
|      |---App_Login
|      |---App_Shop
|      |---App_Order
|      |---App_Payment
|      |---Layouts
|      |    |---master.html
|      |---inc
|           |---navbar.html
|----My_Ecom_Project
|----db.sqlite3
|----manage.py



/////models.py of App_Order/////////////////////////////////////////////
-----------------------
from django.db import models
from django.conf import settings

# Model
from App_Shop.models import Product
# Create your models here.

class Cart(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="cart")
    item = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    purchased = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'{self.quantity} X {self.item}'

    #get carted single product price subtotal
    def get_total(self):
        total = self.item.price * self.quantity    //product.price * quantity
        float_total = format(total, '0.2f')
        return float_total


class Order(models.Model):
    orderitems = models.ManyToManyField(Cart)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    ordered = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)
    paymentId = models.CharField(max_length=264, blank=True, null=True)
    orderId = models.CharField(max_length=200, blank=True, null=True)

    #get carted all product price grandtotal
    def get_totals(self):
        total = 0
        for order_item in self.orderitems.all():        //get all carted product list
            total += float(order_item.get_total())      // total += product.price * quantity
        return total




                  qty    price     total
-------------------------------------
#tiem 1       3     150     = 450  (cart get_total())
#tiem 2       1     450     = 450  (cart get_total())
-------------------------------------
                      total        = 900 (order get_totals())









////////migration//////////////////////////
py manage.py makemigrations App_Order
py manage.py migrate

///////register in admin of App_Order////////////////////
from django.contrib import admin
from App_Order.models import Cart, Order

# Register your models here.

admin.site.register(Cart)
admin.site.register(Order)

///////views.py of App_Order////////////////////////////

from django.shortcuts import render, get_object_or_404, redirect

# Authentications
from django.contrib.auth.decorators import login_required

# Model
from App_Order.models import Cart, Order
from App_Shop.models import Product
# Messages
from django.contrib import messages
# Create your views here.

@login_required
def add_to_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    print("Item")
    print(item)
    order_item = Cart.objects.get_or_create(item=item, user=request.user, purchased=False)
    print("Order Item Object:")
    print(order_item)
    print(order_item[0])
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    print("Order Qs:")
    print(order_qs)
    #print(order_qs[0])
    if order_qs.exists():
        order = order_qs[0]
        print("If Order exist")
        print(order)
        if order.orderitems.filter(item=item).exists():
            order_item[0].quantity += 1
            order_item[0].save()
            messages.info(request, "This item quantity was updated.")
            return redirect("App_Shop:home")
        else:
            order.orderitems.add(order_item[0])
            messages.info(request, "This item was added to your cart.")
            return redirect("App_Shop:home")
    else:
        order = Order(user=request.user)
        order.save()
        order.orderitems.add(order_item[0])
        messages.info(request, "This item was added to your cart.")
        return redirect("App_Shop:home")


@login_required
def cart_view(request):
    carts = Cart.objects.filter(user=request.user, purchased=False)
    orders = Order.objects.filter(user=request.user, ordered=False)
    if carts.exists() and orders.exists():
        order = orders[0]
        return render(request, 'App_Order/cart.html', context={'carts':carts, 'order':order})
    else:
        messages.warning(request, "You don't have any item in your cart!")
        return redirect("App_Shop:home")


@login_required
def remove_from_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists():
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)[0]
            order.orderitems.remove(order_item)
            order_item.delete()
            messages.warning(request, "This item was removed form your cart")
            return redirect("App_Order:cart")
        else:
            messages.info(request, "This item was not in your cart.")
            return redirect("App_Shop:home")
    else:
        messages.info(request, "You don't have an active order")
        return redirect("App_Shop:home")

@login_required
def increase_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists():
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)[0]
            if order_item.quantity >= 1:
                order_item.quantity += 1
                order_item.save()
                messages.info(request, f"{item.name} quantity has been updated")
                return redirect("App_Order:cart")
        else:
            messages.info(request, f"{item.name} is not in your cart")
            return redirect("App_Shop:home")
    else:
        messages.info(request, "You don't have an active order")
        return redirect("App_Shop:home")


@login_required
def decrease_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists():
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)[0]
            if order_item.quantity > 1:
                order_item.quantity -= 1
                order_item.save()
                messages.info(request, f"{item.name} quantity has been updated")
                return redirect("App_Order:cart")
            else:
                order.orderitems.remove(order_item)
                order_item.delete()
                messages.warning(request, f"{item.name} item has been removed from your cart")
                return redirect("App_Order:cart")
        else:
            messages.info(request, f"{item.name} is not in your cart")
            return redirect("App_Shop:home")
    else:
        messages.info(request, "You don't have an active order")
        return redirect("App_Shop:home")








////////urls.py of App_Order/////////////////////////////////////

from django.urls import path
from App_Order import views

app_name = 'App_Order'

urlpatterns = [
    path('add/<pk>/', views.add_to_cart, name="add"),
    path('remove/<pk>/', views.remove_from_cart, name="remove"),
    path('cart/', views.cart_view, name="cart"),
    path('increase/<pk>/', views.increase_cart, name="increase"),
    path('decrease/<pk>/', views.decrease_cart, name="decrease"),
]





///////HTML//////////////////////////////////////////////////////////////
in navbar.html
------------------
<a href="{% url 'App_Order:cart' %}"><i class="fa fa-shopping-cart"></i></a>



in product_single.html
-----------------
<a href="{% url 'App_Order:add' pk=object.pk %}">Add To Cart</a>


in cart.html
------------------
{% extends 'master.html' %}
{% block body_block %}
<div class="container my-5">
  <div class="my-5">
    <h2>Your Cart</h2>
  </div>
  <table class="table table-hover">
    <thead>
      <tr>
        <th scope="col" width="15%">#</th>
        <th scope="col">Product Name</th>
        <th scope="col">Quantity</th>
        <th scope="col" align="right">Price</th>
        <th scop="col">Remove</th>
      </tr>
    </thead>
    <tbody>
      {% for cart in carts %}
      <tr>
        <th scope="row">{{ forloop.counter }}</th>
        <td>{{cart.item.name}}</td>
        <td>
          <a class="mr-2" href="{% url 'App_Order:decrease' pk=cart.item.pk %}"><span class="badge badge-light"><i class="fas fa-minus"></i></span></a>
          {{ cart.quantity }}
          <a class="mr-2" href="{% url 'App_Order:increase' pk=cart.item.pk %}"> <span class="badge badge-light"> <i class="fas fa-plus"></i></span></a>
        </td>
        <td align="right">&#2547; {{cart.get_total}}</td>
        <td><a href="{% url 'App_Order:remove' pk=cart.item.pk %}" class="btn btn-danger btn-sm">Remove From Cart</a></td>
      </tr>
      {% endfor %}
      <tr>
        <th scope="row"></th>
        <td colspan="2">Total</td>
        <td align="right">&#2547; {{order.get_totals | floatformat:2 }}</td>
        <td></td>
      </tr>
      <tr>
        <th scope="row"></th>
        <td colspan="4" class="text-right">
          <a href="{% url 'App_Shop:home' %}" class="btn btn-warning mr-4">Continue Shoping</a>
          <a href="{% url 'App_Payment:checkout' %}" class="btn btn-success mr-4">Proceed To Checkout</a>
        </td>
      </tr>
    </tbody>
  </table>
</div>
{% endblock %}




//////Count Total Order Item and show as navbar cart total//////////////////////////////////////////
1. create folder "templatetags" in App_Order
2. create a file "__init__.py"
3. create a file "cart_tag.py"

   in cart_tag.py
----------------------
from django import template
from App_Order.models import Order

register = template.Library()


@register.filter
def cart_total(user):
    order = Order.objects.filter(user=user, ordered=False)

    if order.exists():
        return order[0].orderitems.count()
    else:
        return 0

in navbar.html
------------------
{% load cart_tag %}
<a href="{% url 'App_Order:cart' %}" class="nav-link">
   <i class="fa fa-shopping-cart"></i>
   <span class="badge badge-light">{{ request.user | cart_total }}</span>
</a>



