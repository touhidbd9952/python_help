My_Ecom_Project
|----App_Login
|----App_Shop
|----App_Order
|----App_Payment
|----media
|      |---Products
|      |---Profile_pic
|----static
|      |---css
|      |---js
|----templates
|      |---App_Login
|      |---App_Shop
|      |---App_Order
|      |---App_Payment
|      |---Layouts
|      |    |---master.html
|      |---inc
|           |---navbar.html
|----My_Ecom_Project
|----db.sqlite3
|----manage.py

in urls.py of main
-----------------------
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


urlpatterns = [
	path('admin/', admin.site.urls),
	path('', include('App_Shop.urls')),
	path('account/', include('App_Login.urls')),
	path('shop/', include(App_Order.urls)),
	path('payment/', include('App_Payment.urls')),
]

urlpatterns += staticfiles_urlpatterns()
urlpatterns += statice(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)





/////models.py of App_Payment/////////////////////////////////////////////
-----------------------
from django.db import models
from django.conf import settings
# Create your models here.

class BillingAddress(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    address = models.CharField(max_length=264, blank=True)
    zipcode = models.CharField(max_length=10, blank=True)
    city = models.CharField(max_length=30, blank=True)
    country = models.CharField(max_length=20, blank=True)

    def __str__(self):
        return f'{self.user.profile.username} billing address'

    def is_fully_filled(self):
        field_names = [f.name for f in self._meta.get_fields()]

        for field_name in field_names:
            value = getattr(self, field_name)
            if value is None or value=='':
                return False
        return True


    class Meta:
        verbose_name_plural = "Billing Addresses"





////////migration//////////////////////////
py manage.py makemigrations App_Payment
py manage.py migrate

///////register in admin of App_Payment////////////////////
from django.contrib import admin
from App_Payment.models import BillingAddress

# Register your models here.

admin.site.register(BillingAddress)


///////forms.py of App_Payment//////////////////////////////

from django import forms
from App_Payment.models import BillingAddress



class BillingForm(forms.ModelForm):
    class Meta:
        model = BillingAddress
        fields = ['address', 'zipcode', 'city', 'country']



////////views.py of App_Payment///////////////////////////////////

from django.shortcuts import render, HttpResponseRedirect, redirect
from django.urls import reverse
from django.contrib import messages
#models and forms
from App_Order.models import Order, Cart
from App_Payment.forms import BillingAddress
from App_Payment.forms import BillingForm


from django.contrib.auth.decorators import login_required

# for payment
import requests
from sslcommerz_python.payment import SSLCSession
from decimal import Decimal
import socket
from django.views.decorators.csrf import csrf_exempt

# Create your views here.
@login_required
def checkout(request):
    saved_address = BillingAddress.objects.get_or_create(user=request.user)
    saved_address = saved_address[0]
    print(saved_address)
    form = BillingForm(instance=saved_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=saved_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=saved_address)
            messages.success(request, f"Shipping Address Saved!")
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    #print(order_qs)
    order_items = order_qs[0].orderitems.all()
    #print(order_items)
    order_total = order_qs[0].get_totals()
    return render(request, 'App_Payment/checkout.html', context={"form":form, "order_items":order_items, "order_total":order_total, "saved_address":saved_address})

@login_required
def payment(request):
    saved_address = BillingAddress.objects.get_or_create(user=request.user)
    saved_address = saved_address[0]
    if not saved_address.is_fully_filled():
        messages.info(request, f"Please complete shipping address!")
        return redirect("App_Payment:checkout")

    if not request.user.profile.is_fully_filled():
        messages.info(request, f"Please complete profile details!")
        return redirect("App_Login:profile")

    store_id = 'none5e026730bdf7f'
    API_key = 'none5e026730bdf7f@ssl'
    mypayment = SSLCSession(sslc_is_sandbox=True, sslc_store_id=store_id, sslc_store_pass=API_key)

    status_url = request.build_absolute_uri(reverse("App_Payment:complete"))
    #print(status_url)
    mypayment.set_urls(success_url=status_url, fail_url=status_url, cancel_url=status_url, ipn_url=status_url)

    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order_items = order_qs[0].orderitems.all()
    order_items_count = order_qs[0].orderitems.count()
    order_total = order_qs[0].get_totals()

    mypayment.set_product_integration(total_amount=Decimal(order_total), currency='BDT', product_category='Mixed', product_name=order_items, num_of_item=order_items_count, shipping_method='Courier', product_profile='None')


    current_user = request.user
    mypayment.set_customer_info(name=current_user.profile.full_name, email=current_user.email, address1=current_user.profile.address_1, address2=current_user.profile.address_1, city=current_user.profile.city, postcode=current_user.profile.zipcode, country=current_user.profile.country, phone=current_user.profile.phone)

    mypayment.set_shipping_info(shipping_to=current_user.profile.full_name, address=saved_address.address, city=saved_address.city, postcode=saved_address.zipcode, country=saved_address.country)

    response_data = mypayment.init_payment()
    return redirect(response_data['GatewayPageURL'])


@csrf_exempt
def complete(request):
    if request.method == 'POST' or request.method == 'post':
        payment_data = request.POST
        status = payment_data['status']

        if status == 'VALID':
            val_id = payment_data['val_id']
            tran_id = payment_data['tran_id']
            messages.success(request,f"Your Payment Completed Successfully! Page will be redirected!")
            return HttpResponseRedirect(reverse("App_Payment:purchase", kwargs={'val_id':val_id, 'tran_id':tran_id},))
        elif status == 'FAILED':
            messages.warning(request, f"Your Payment Failed! Please Try Again! Page will be redirected!")

    return render(request, "App_Payment/complete.html", context={})

@login_required
def purchase(request, val_id, tran_id):
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order = order_qs[0]
    orderId = tran_id
    order.ordered = True
    order.orderId = orderId
    order.paymentId = val_id
    order.save()
    cart_items = Cart.objects.filter(user=request.user, purchased=False)
    for item in cart_items:
        item.purchased = True
        item.save()
    return HttpResponseRedirect(reverse("App_Shop:home"))

@login_required
def order_view(request):
    try:
        orders = Order.objects.filter(user=request.user, ordered=True)
        context = {"orders": orders}
    except:
        messages.warning(request, "You do no have an active order")
        return redired("App_Shop:home")
    return render(request, "App_Payment/order.html", context)





////////urls.py of App_Payment/////////////////////////////////////

from django.urls import path
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name="checkout"),
    path('pay/', views.payment, name="payment"),
    path('status/', views.complete, name="complete"),
    path('purchase/<val_id>/<tran_id>/', views.purchase, name="purchase"),
    path('orders/', views.order_view, name="orders"),
]




///////HTML//////////////////////////////////////////////////////////////

in cart.html
---------------------

<a href="{% url 'App_Payment:checkout' %}">Proceed To Checkout</a>



in checkout.html
---------------------
{% extends 'master.html' %}
{% load crispy_forms_tags %}
{% block body_block %}
<div class="container mt-5">
  <h2 class="mb-3">
    Shipping Address > <span class="text-muted">Checkout</span>
  </h2>
  <div class="row">
    <div class="col-md-9">
      <div class="card mb-5" style="height: auto">
        <div class="card-body">
          <form method="POST">
            {{form|crispy}}
            {% csrf_token %}
            <button type="submit" class="btn btn-primary float-right">Save Address</button>
          </form>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card" style="height:auto">
        <div class="card-body">
          <ul class="list-group list-group-flush">
            {% for order_item in order_items %}
              <li class="list-group-item">{{ order_item.item.name}} x {{order_item.quantity}}</li>
            {% endfor %}
          </ul>
        </div>
        <div class="card-footer">
          <span class="float-left"><b>Order Total</b></span>
          <span class="float-right"><b>&#2547; {{order_total|floatformat:2}}</b></span>
        </div>
      </div>
      <br>
      <br>
      {% if saved_address.is_fully_filled %}
      <a href="{% url 'App_Payment:payment' %}" class="btn btn-warning btn-md">Make Payment</a>
      {% else %}
      <div class="alert alert-info">
        <p>Please fill up all the information to make payment.</p>
      </div>
      {% endif %}
    </div>
  </div>
</div>
{% endblock %}




in payment.html
---------------------------------------



in complete.html of App_Payment
--------------------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="utf-8">
  <meta http-equiv="refresh" content="5; url={% url 'App_Shop:home' %}">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <title>Payment Status</title>
</head>
<body>
  <div class="container">
    <div class="messages container mt-2">
      {% if messages %}
      {% for message in messages %}
      <div {% if message.tags %} class="alert alert-{{message.tags}}{% endif %}" role="alert">
        {{message}}
      </div>
      {% endfor %}
      {% endif %}
    </div>
  </div>
</body>
</html>



in order.html of App_Payment
------------------------------------
1. go to navbar.html and set 

	<a href="{% url 'App_Payment:orders' %}">Orders</a>

2. in order.html
    --------------------

{% extends 'master.html' %}
{% block body_block %}
<div class="container mt-5">
  <h2 class="text-center"><strong>Your Orders</strong></h2>
  <div class="row">
    <div class="col-md-12">
      <div class="card mt-5" style="height:auto">
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Order Id</th>
                <th scope="col">Products</th>
                <th scope="col">Status</th>
              </tr>
            </thead>
            <tbody>
              {% for order in orders %}
              <tr>
                <th scope="row">{{ forloop.counter }}</th>
                <td><a href="#">{{ order.orderId }}</a></td>
                <td>
                  {% for item in order.orderitems.all %} {{item}} <br> {% endfor %}
                </td>
                <td><span class="badge badge-primary">Processing Your ORder</span></td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <div class="col-md-12 my-5 text-center">
      <a href="{% url 'App_Shop:home' %}">Bact to Home</a>
    </div>
  </div>
</div>
{% endblock %}





