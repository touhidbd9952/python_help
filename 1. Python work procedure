///////Project and App Installation///////////////////////////////////////////////////

1. create a project folder "PythonProjects" in d drive where your want
2. go to "PythonProjects" and open cmd (command prompt)

3. üëáÔ∏è create virtual environment:  

        python -m venv venv

4. üëáÔ∏è activate on Windows (cmd.exe):
      
        venv/Scripts/activate

5. üëáÔ∏è install django in the virtual environment:

        pip install django

6. üëáÔ∏è create your django project:

      django-admin startproject yourprojectname
      
7. üëáÔ∏è go to "yourprojectname":

      cd yourprojectname

8. üëáÔ∏è run your project:

      python manage.py runserver
9. üëáÔ∏è create project application(App_Login, App_Blog) inside project folder

	python  manage.py  startapp  App_Login
	python  manage.py  startapp  App_Blog

10. üëáÔ∏è install some package (pip : prefereed installer program)

	pip install Pillow   // for image upload
	pip install django-cleanup  //old image delete
	pip install django-crispy-forms
	pip install crispy-bootstrap5
	pip install mysqlclient

11. üëáÔ∏è Create media, static, templates folder 
	
	My_Blog
	|---App_Blog
	|---App_Login
	|---media
	|---static
	|---templates

12. üëáÔ∏è set configure in settings.py for media, static, templates, App_Blog, App_Login

13. üëáÔ∏è create urls.py in application (App_Blog, App_Login) and make connection between main urls.py with application urls.py 

14. üëáÔ∏è create views.py in main project

14. üëáÔ∏è start developing project from login
	


//Project Structure/////////////////////////////////
------------------------------------------------------------
My_Blog
|
|----App_Blog(application Folder)
|	|---__init__.py
|	|---admin.py (connect model with admin)
|	|---views.py (application controller file)
|	|---models.py (database table create file (model))
|	|---urls.py (application route file)
|
|----App_Login(application Folder)
|	|---__init__.py
|	|---admin.py (connect model with admin)
|	|---views.py (application controller file)
|	|---models.py (database table create file (model))
|	|---urls.py (application route file)
|
|----env(environment variable name)
|
|----media(image)
|----static(css,js)
|
|----templates(views)
|	|---App_Blog(folder)
|	|---App_Login(folder)
|	|---master.html
|	|---index.html
|	|---about.html
|	|---contact.html
|
|----My_Blog (Main)
	|---__init__.py
	|---views.py (MainController)
	|---manage.py
	|---sttings.py (config. file)
	|---urls.py (main route)
	|---wsgi.py





////////settings.py///////////////////////////////////////////////////////////////////
"""
Django settings for My_Blog_Project project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from django.urls import reverse_lazy


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
STATIC_DIR = os.path.join(BASE_DIR, 'static')
MEDIA_DIR = os.path.join(BASE_DIR, 'media')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fs7lbrix)!(i3p5gu$&2)oo(*ee+h67e&y2*&ti&5xdo)8@e)l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App_Login',
    'App_Blog',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_cleanup.apps.CleanupConfig',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'My_Blog_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'App_Login.context_processors.absolute_url',
            ],
        },
    },
]

WSGI_APPLICATION = 'My_Blog_Project.wsgi.application'





# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'myblogdb',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
        "OPTIONS": {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1",
            'charset': 'utf8mb4',
            "autocommit": True,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [STATIC_DIR, ]

#media
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = '/media/'



LOGIN_URL = '/account/login/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


/////////////////////////////////////////////////////////////////////////////////////


//////////////////////models.py//////////////////////////////////////////////////////
models.py of App_Login
----------------------

from django.db import models
from django.contrib.auth.models import User


# Create your models here.
class UserProfile(models.Model):
    #user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='user_profile')
    #profile_pic = models.ImageField(upload_to='profile_pics')
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="user_profile")
    profile_pic = models.ImageField(upload_to="profile_pics")
    address = models.TextField(verbose_name="Address", null=True)
    phone = models.CharField(verbose_name="Phone", max_length=255, null=True)

-----------------------------------------------------------------------------------------------------------------------------
    
models.py of App_Blog
----------------------

from django.db import models
from django.contrib.auth.models import User

# Create your models here.
# to see blog site go to medium.com

class Blog(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post_author')
    blog_title = models.CharField(max_length=255, verbose_name='Put a Title')
    slug = models.SlugField(max_length=255, unique=True)
    blog_content = models.TextField(verbose_name='What is in your mind?')
    blog_image = models.ImageField(upload_to="blog_images", verbose_name="Image")
    publish_date = models.DateTimeField(auto_now_add=True) #created_at
    update_date = models.DateTimeField(auto_now=True) #updated_at
    #author blog_title slug blog_content blog_image publish_date update_date

    def __str__(self):
        return self.blog_title
    

class Comment(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, related_name="blog_comment")
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="user_comment")
    comment = models.TextField(verbose_name='Your Comment')
    comment_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.comment

class Likes(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, related_name="liked_blog")
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="liker_user")

class Dislikes(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, related_name='dislied_blog')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='disliker_user')
    

/////////create superadmin account///////////////////////
create superadmin account
-------------------------------------
py manage.py createsuperuser
username:admin
email address:admin@gmail.com
password:123456789
Bypass password validation and create user anyway? [y/N]: y

now you can login to your admin panel
--------------------------------------------------
127.0.0.1:8000/admin


///////// Add All Your Table to Admin Panel /////////////
in admin.py of App_Login
-------------------------

from django.contrib import admin
from App_Login.models import UserProfile

# Register your models here.
admin.site.register(UserProfile)

in admin.py of App_Blog
------------------------

from django.contrib import admin
from App_Blog.models import Blog, Comment, Likes

# Register your models here.
admin.site.register(Blog)
admin.site.register(Comment)
admin.site.register(Likes)


///////// migrate all your table in database /////////////
1. create a database in mysql
2. configure database in settings.py
3. run migration command:
	
	py manage.py migrate
	py manage.py makemigrations App_Login
	py manage.py makemigrations App_Blog
	py manage.py migrate

4. check in database



----------------------------------------------------------------------------------------------------------------------------

//////////////////////forms.py//////////////////////////////////////////////////////
forms.py in App_Login
----------------------

from django import forms
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from django.contrib.auth.models import User
from App_Login.models import UserProfile

class SignUpForm(UserCreationForm):
    #password = forms.CharField(required=True, label='Password', widget=forms.PasswordInput(attrs={'placeholder':'Enter your password here'}) #custom field
    email = forms.EmailField(required=True, label='Email Address', widget=forms.TextInput(attrs={'placeholder':'Email'}) #custom field
    class Meta:
        model = User
        fields = ['username','email','password1','password2']

----------------------------------------------------------------------
class CreateNewUserForm(UserCreateForm):
	email = forms.EmailField(required =True, label="", widget=forms.TextInput(attrs={'placeholder':'Email'}))
	username = forms.CharField(required=True, label="", widget=forms.TextInput(attrs={'placeholder':'Username'}))
	password1 = forms.CharField(
	   required = True,
	   label = "",
	   widget = froms.PasswordInput(attrs={'placeholder':'Password'})
	)
	password2 = forms.CharField(
	   required = True,
	   label = "",
	   widget = froms.PasswordInput(attrs={'placeholder':'Password Confirmtion'})
	)
	
	class Meta:
		model = User
		fields = ['email','username','password1','password2']
---------------------------------------------------------------------

class UserInfoEditForm(UserChangeForm):
    class Meta:
        model = User
        fields = ['username','email','first_name','last_name','password']

class ProfilePicForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ['profile_pic','address','phone',]
        
--------------------------------------------------------------------------------------------------------------------------        

forms.py in App_Blog
--------------------

from django import forms
from App_Blog.models import Blog, Comment

class BlogForm(forms.ModelForm):
    class Meta:
        model = Blog
        fields = ['blog_title','blog_content','blog_image',]

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['comment',]



///////////////////////urls.py//////////////////////////////////////////////////////
urls.py in main project
-----------------------

from django.contrib import admin
from django.urls import path, include
from . import views

from django.conf import settings
from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


urlpatterns = [
    path('admin/', admin.site.urls),
    path('account/', include('App_Login.urls')),
    path('blog/', include('App_Blog.urls')),
    path('', views.Index, name='index'),
]
urlpatterns += staticfiles_urlpatterns()
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


urls.py in App_Login
---------------------

from django.urls import path
from App_Login import views


app_name = 'App_Login'

urlpatterns = [
    path('signup/', views.sign_up, name='singup'),
	path('login/', views.login_page, name='login'),
    path('logout/', views.logout_user, name='logout'),
    path('user-profile/', views.user_profile, name='user_profile'),
    path('user-info-edit/', views.user_info_edit, name='user_info_edit'),
    path('password/', views.user_password_change, name='user_password_change'),
    path('add-profile-pic/', views.add_profile_pic, name="add_profile_pic"),
    path('change-profile-pic/', views.change_profile_pic, name="change_profile_pic"),
]


urls.py in App_Blog
---------------------

from django.urls import path
from App_Blog import views

app_name = 'App_Blog'

urlpatterns = [
    path('', views.blog_list, name='blog_list'),
    path('index', views.Index, name='index'),
    path('add-blog', views.add_blog, name='add_blog'),
    path('edit-blog/<int:id>', views.edit_blog, name='edit_blog'),
    path('myblog-list', views.myblog_list, name='myblog_list'),
    path('blog-details/<slug:slug>/', views.blog_details, name='blog_details'),
    path('blog-likes/<pk>', views.blog_likes, name='blog_likes'),
    path('blog-unlike/<pk>', views.blog_unlikes, name='blog_unlikes'),
    
]





//////////////////////views.py//////////////////////////////////////////////////////

views.py in App_Login
---------------------

from django.shortcuts import render
from django.contrib.auth.forms  import UserCreationForm, AuthenticationForm, PasswordChangeForm
from App_Login.forms import SignUpForm, UserInfoEditForm, ProfilePicForm
from django.contrib.auth import authenticate, login, logout
from django.shortcuts  import HttpResponse, HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators  import login_required
from django.conf import settings

# Create your views here.
def  sign_up(request):
	registered = False
	
	#form = UserCreationForm()
	form = SignUpForm()
	if request.method == 'POST':
		#form = UserCreationForm(data = request.POST)
		form = SignUpForm(data = request.POST)
		if form.is_valid():
			form.save()
			registered = True

	data = {
		'form': form,
		'registered': registered,
	}

	return render(request, 'App_Login/signup.html', context=data)

#user_login
def login_page(request):
	form = AuthenticationForm()
	if request.method == 'POST':
		form = AuthenticationForm(data = request.POST)
		if form.is_valid():
			username = form.cleaned_data.get('username')
			password = form.cleaned_data.get('password')
			user = authenticate(username=username, password=password)
			if user is not None:
				login(request,user)
				return HttpResponseRedirect(reverse('App_Blog:index'))
	data ={'form':form,}
	return render(request, 'App_Login/login.html', context=data)

@login_required
def logout_user(request):
	logout(request)
	return HttpResponseRedirect(reverse('index'))

@login_required
def user_profile(request):
	#url = request.build_absolute_uri('/')
	#data ={'site_url': url}
	data ={}
	return render(request, 'App_Login/profile.html', context=data)

@login_required
def user_info_edit(request):
	user = request.user
	form = UserInfoEditForm(instance = user)
	#update info
	result = False
	if request.method == 'POST':
		form = UserInfoEditForm(request.POST, instance = user) #formclassname(newdata, olddata)
		if form.is_valid():
			form.save()
			result = True
			form = UserInfoEditForm(instance = user)

	data={'form':form,'result':result}
	return render(request, 'App_Login/user_info_edit.html', context=data)

@login_required
def user_password_change(request):
	user = request.user
	form = PasswordChangeForm(user)
	result = False
	if request.method == 'POST':
		form = PasswordChangeForm(user, request.POST)
		if form.is_valid():
			form.save()
			result = True
			return HttpResponseRedirect(reverse('index'))

	data ={
		'form':form,
		'result':result,
	}
	return render(request, 'App_Login/user_password_change.html', context=data)

@login_required
def add_profile_pic(request):
	form = ProfilePicForm()	
	if request.method == 'POST':
			form = ProfilePicForm(request.POST, request.FILES)
			if form.is_valid():
				formobj = form.save(commit=False)
				formobj.user = request.user
				formobj.save()
				return HttpResponseRedirect(reverse('App_Login:user_profile'))	
	data={'form':form}
	return render(request,'App_Login/change_profile_pic.html',context=data)

@login_required
def change_profile_pic(request):
	form = ProfilePicForm(instance=request.user.user_profile)
	if request.method == 'POST':
		form = ProfilePicForm(request.POST, request.FILES, instance=request.user.user_profile)
		if form.is_valid():
			formobj = form.save(commit=False)
			formobj.user = request.user
			formobj.save()
			return HttpResponseRedirect(reverse('App_Login:user_profile'))
		
	data={'form':form}
	return render(request,'App_Login/change_profile_pic.html',context=data)

------------------------------------------------------------------------------------------------------------------------------------


views.py in App_Blog
-----------------------

from django.shortcuts import render
from django.shortcuts import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from App_Blog.forms import BlogForm,CommentForm
from App_Blog.models import Blog,Comment,Likes
import uuid

# Create your views here.
def blog_list(request):
    blogs = Blog.objects.all()
    return render(request, 'App_Blog/blog_list.html', context={'blog_list':blogs})

def Index(request):
    return render(request, 'App_Blog/index.html', context={})

@login_required
def add_blog(request):
    form = BlogForm()
    result = False
    msg = ""
    if request.method == 'POST':
        form = BlogForm(request.POST, request.FILES)
        if form.is_valid():
            formObj = form.save(commit=False)
            formObj.author = request.user
            formObj.slug = request.POST.get('blog_title').replace(" ", "-") + "-" + str(uuid.uuid4())

            formObj.save()
            result=True
            msg = "Save Successfully"

    data={
        'form':form,
        'result':result,
        'msg':msg,
    }
    return render(request,'App_Blog/add_blog.html', context=data)

@login_required
def edit_blog(request,id):
    predata = Blog.objects.get(pk=id)
    result = False
    msg = ""
    form = BlogForm(instance=predata)
    if request.method == 'POST':
        form = BlogForm(request.POST, request.FILES, instance=predata)
        if form.is_valid():
            formObj = form.save(commit=False)
            formObj.author = request.user
            formObj.slug = request.POST.get('blog_title').replace(" ","-")+"-"+str(uuid.uuid4())
            formObj.save()
            result = True
            msg = "Updated Successfully"

    data ={
        'form':form,
        'result':result,
        'msg':msg,
    }
    return render(request,'App_Blog/edit_blog.html',context=data)

@login_required
def myblog_list(request):
    blogs = Blog.objects.filter(author=request.user.id).order_by('-publish_date')  #decending order
    return render(request, 'App_Blog/myblog_list.html',context={'blog_list':blogs})

@login_required
def blog_details(request, slug):
    blog = Blog.objects.get(slug=slug)
    user = request.user
    comments = Comment.objects.filter(blog=blog)

    liked = False
    alreadyliked = Likes.objects.filter(blog=blog, user=user)
    if alreadyliked:
        liked = True

    ########Comment#########
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            formObj = form.save(commit=False)
            formObj.blog = blog
            formObj.user = request.user
            formObj.save()
            return HttpResponseRedirect(reverse('App_Blog:blog_details',kwargs={'slug':slug}))
    else:
        form = CommentForm()
    data = {
        'blog':blog,
        'form':form,
        'comments':comments,
        'liked':liked,
    }
    return render(request, 'App_Blog/blog_details.html', context=data)

@login_required
def blog_likes(request, pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_liked = Likes.objects.filter(blog=blog, user=user)
    if not already_liked:
        likesObj = Likes(blog=blog, user=user)
        likesObj.save()
    return HttpResponseRedirect(reverse('App_Blog:blog_details',kwargs={'slug':blog.slug,}))

@login_required
def blog_unlikes(request, pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_liked = Likes.objects.filter(blog=blog, user=user)
    already_liked.delete()
    return HttpResponseRedirect(reverse('App_Blog:blog_details', kwargs={'slug':blog.slug}))





//////////////////////HTML Page //////////////////////////////////////////////////////

master.html
--------------

<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>{% block title_block %}My Blog {% endblock %}</title>

{% load static %}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>


</head>

<body>
    <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
     <ul class="navbar-nav">
        <li class="nav-item active">
            <a href="{% url 'index' %}">Home</a>
            {% if user.is_authenticated %}
            <a href="{% url 'App_Login:user_profile' %}">My Profile</a>
            <a href="{% url 'App_Login:logout' %}">Logout</a>
            {% else %}
            <a href="{% url 'App_Login:singup' %}">Signup</a>
            <a href="{% url 'App_Login:login' %}">Login</a>
            {% endif %}
        </li>    
     </ul>
    </nav>
    
    <div class="container">
      {% block content %}


      {% endblock %}
    </div>

</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------


signup.html
-----------------

{% extends 'master.html' %}
{% load crispy_forms_tags %}
{% block title_block %}Signup Form{% endblock %}
{% block content %}

    {% if registered %}
        <div class="alert alert-success">
        Account Created Successfully! <a href="{% url 'App_Login:login'%}">Login Here</a>
        </div>
    {% else %}

        <h2>Create New Account</h2>

        <form method='POST'>
        {% csrf_token %}

        {{ form | crispy}}

        <button type="submit" class="btn btn-primary btn-sm">Create Account</button>

        </form>

        <br>
        <p>Already have an account? <a href="{% url 'App_Login:login'%}">Login Here</a></p>

    {% endif %}




{% endblock %}

---------------------------------------------------------------------------------------------------------------------------------


login.html
----------------
     
{% extends 'master.html' %}
{% load crispy_forms_tags %}
{% block  title_block %} Login {% endblock %}
{% block  content %}

<h2>Login:</h2>
<form method="POST">
    {% csrf_token %}

    {{form|crispy}}

    <button type="submit" class="btn btn-primary btn-sm">Login</button>
</form>

{% endblock %}

---------------------------------------------------------------------------------------------------------------------------

profile.html
-------------------------

{% extends 'master.html' %}
{% load static %}
{% block title_block %}My Profile{%endblock%}
{% block content %}
<br>
<br>
<h3 style="text-decoration:underline">My Profile</h3>
{% if user.user_profile %}
<p> 
    <img src="/media/{{user.user_profile.profile_pic}}" class="rounded-circle" width="80px">
    <br>
    <a href="{% url 'App_Login:change_profile_pic' %}">Edit Picture</a>
</p>
{% else %}
<p>
    <img src="/media/profile_pics/man.png" class="rounded-circle">
    <a href="{% url 'App_Login:add_profile_pic' %}">Add Picture</a
</p>
{% endif %}

<p>Name: {{user.first_name}} {{user.last_name}}</p>
<p>Email: {{user.email}}</p>
<p>Username: {{user.username}}</p>
<br>
<a href="{% url 'App_Login:user_info_edit' %}">Edit</a>

{% endblock %}

--------------------------------------------------------------------------------------------------------------------


user_info_edit.html
--------------------

{% extends 'master.html' %} 
{% load crispy_forms_tags %} 
{% block title_block %}Profile Edit Form{% endblock %} 
{% block content %}

<br>
<br>
<a href="{% url 'App_Login:user_profile' %}" style="float: right">Back</a>

{% if result %}
<div class="alert alert-success">Profile updated Successfully</div>
{% endif %}

<h3>Profile Edit</h3>
<form method="POST">
  {{form|crispy}} 
  {% csrf_token %}
  <button type="submit" class="btn btn-primary btn-sm">Update</button>
</form>

{% endblock %}


-------------------------------------------------------------------------------------------------------


user_password_chage.html
------------------------

{% extends 'master.html' %}
{% load crispy_forms_tags %}
{% block title_block %}Password Edit Form{% endblock %}
{%block content %}

{% if result %}
    <div class="alert alert-success">Password Change Successfully</div>
{% endif %}
<form method="POST">
 {{form|crispy}}
 {% csrf_token %}
 <button type="submit" class="btn btn-primary btn-sm">Change</button>
</form>


{% endblock %}


-----------------------------------------------------------------------------------------------------------------------------


add_edit_profile_otherinfo.html
-------------------------------

{% extends 'master.html' %}
{% load crispy_forms_tags %}
{% block  title_block %} Profile Pic {% endblock %}
{% block  content %}

<h2>Profile Pic:</h2>
<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}

    {{form|crispy}}

    <button type="submit" class="btn btn-primary btn-sm">Upload</button>
</form>

{% endblock %}



--------------------------------------------------------------------------------------------------------------------------------
      Blog
--------------------------------------------------------------------------------------------------------------------------------

blog_list.html
--------------------------

{% extends 'master.html' %}
{% load custom_filters %}
{% block title_block %}Blog List{% endblock %}
{% block content %}

<h1>Blog List</h1>
{% for b in blog_list %}
<div class="row" style="margin-bottom:20px;">
  <div class="col-sm-6">
    <p>
    <h3>{{b.blog_title}}</h3>
    <h6>{{b.publish_date|date:"D d M Y"}}</h6>

    {% if user.is_authenticated and  user ==  b.user %}
    <a href="{% url 'App_Blog:edit_blog' id=b.id %}">Edit Blog</a>
    {% endif %}
    </p>
    <p>
        {{b.blog_content|range_filter|linebreaks}}
        <br>
        <a href="{% url 'App_Blog:blog_details' slug=b.slug %}">Read More</a>
    </p>
  </div>
  <div class="col-sm-6">  
    <img src="/media/{{b.blog_image}}" width="200px">
  </div>
</div>
<hr>
{% endfor %}


{% endblock %}


-------------------------------------------------------------------------------------------------------------

add_blog.html
-------------------------

{%extends 'master.html'%}
{%load crispy_forms_tags %}
{%block block_title%}Add Blog Form{%endblock%}
{%block content%}

<h3>Add Blog Form</h3>
{% if result %}
<div class="alert alert-success">
    {{msg}}
</div>
{% endif %}
<form method="POST" enctype="multipart/form-data">
{{form|crispy}}
{%csrf_token%}
<button type="submit" class="btn btn-primary btn-sm">Add</button>
</form>

{%endblock%}


---------------------------------------------------------------------------------------------------------------

edit_blog.html
----------------------------

{% extends 'master.html'%}
{% load crispy_forms_tags %}
{% block block_title %}Edit Blog{%endblock%}
{% block content %}

<a href="{% url 'App_Blog:myblog_list' %}">Back</a>
<h3>Edit Blog</h3>
{% if result %}
    <div class="alert alert-success">{{msg}}</div>
{% endif %}
<form method="POST" enctype="multipart/form-data">
    {{form|crispy}}
    {% csrf_token %}
    <button type="submit" class="btn btn-primary btn-sm">Change</button>
</form>

{% endblock %}


------------------------------------------------------------------------------------------------------------------

blog_details.html
------------------

{% extends 'master.html' %}
{%load crispy_forms_tags%}
{% block block_title %}Blog Details{% endblock %}
{% block content%}

<div class="row" style="margin-bottom:20px;">
    <div class="col-sm-6">
<h2>{{blog.blog_title}}</h2>
<i><h4>Posted by: @{{blog.author.first_name}} {{blog.author.last_name}}</h4></i>
<i><h6>Published on: {{blog.publish_date|date:"D d M Y"}}</h6></i>
<i><h6>Updated on: {{blog.update_date|date:"D d M Y"}}</h6></i>
    </div>
    <div class="col-sm-6">
        <img src="/media/{{blog.blog_image}}" width="200px">
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        {{blog.blog_content|linebreaks}}
        <br>
        <a href="{% url 'App_Blog:blog_likes' pk=blog.pk %}" class="btn btn-primary btn-sm" title="Like" style="margin-right:10px;"><i class="fa fa-thumbs-up" aria-hidden="true"></i></a>
        <a href="{% url 'App_Blog:blog_unlikes' pk=blog.pk %}" class="btn btn-primary btn-sm" title="Dislike"><i class="fa fa-thumbs-down" aria-hidden="true"></i></a>
        {%if liked %}
        <span style="padding-left:20px;"><a href="javascript:">You Liked</a></span>
        {% endif %}
    </div>
</div>


<div class="row" style="margin-top:20px;">   
        <div class="col-sm-6">
            Comments:
            <br>
            {%for c in comments%}
            <table>
                <tr>
                    <td><a><b>{{c.user.first_name}}:</b></a> {{c.comment}}</td>
                </tr>
            </table>   
            {%endfor%}
        </div>
        <div class="col-sm-6" style="padding-bottom:20px;">
            <form method="POST">
                {{form|crispy}}
                {%csrf_token%}
                <button type="submit" class="btn btn-primary btn-sm"> Add</button>
            </form>
        </div>
        
    </div>


</div>


{% endblock %}


---------------------------------------------------------------------------------------------------------------


myblog_list.html
-----------------------

{% extends 'master.html' %}
{% load custom_filters %}
{% block block_title%}My Blog List{%endblock%}
{% block content %}

<h3>My Blog List</h3>


{% for b in blog_list %}
<div class="row" style="margin-bottom:20px;">
  <div class="col-sm-6">
    <p>
    <h3>{{b.blog_title}}</h3>
    <h6>{{b.publish_date|date:"D d M Y"}}</h6>
    </p>
    
    <p>
        {{b.blog_content|range_filter|linebreaks}}
        <br>
        <a href="{% url 'App_Blog:blog_details' slug=b.slug %}">Read More</a>
    </p>
  </div>
  <div class="col-sm-6">  
    <img src="/media/{{b.blog_image}}" width="200px">
  </div>
</div>
<hr>
{% endfor %}


{% endblock %}


--------------------------------------------------------------------------------------------------------------------------
