///// Database Table Create///////////////////////////
every application has a "models.py" file
//help url:    docs.djangoproject.com/en/3.0/topics/db/models/

woodyengineering
|-------- amphibious
|	|---_init_.py
|	|--- admin.py
|	|--- apps.py
|	|--- models.py (Database Table Create)
|	|--- tests.py
|	|--- urls.py (route)
|	|--- views.py (controller)
|
|--------- My_First_Project
	|--- settings.py
	|--- urls.py
			
in models.py (amphibious)
-----------------------------------
step-1: table design
----------

from django.db import models

# Create your models here.
class Category(models.Model):
   #  id  = models.AutoField(Primary_key = True)
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def  __str_(self):
		        return "Category: "+self.name + " ,Created: "+ self.created_at
			

class SubCategory(models.Model):
    #  id  = models.AutoField(Primary_key = True)
    cat = models.ForeignKey(Category, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def  __str_(self):
		        return "SubCategory: "+self.name + " ,cat-id"+self.name+" ,Created: "+ self.created_at
			
			
class Musician(models.Model):
   #  id  = models.AutoField(Primary_key = True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50, blank=True)
    instrument = models.CharField(max_length=100)
    
    def  __str_(self):
		return self.first_name + " "+ self.last_name
    

class Album(models.Model):
   #  id  = models.AutoField(Primary_key = True)
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    rating =(
	(1, "Worst"),
	(2, "Bad"),
	(3, "Not Bad"),
	(4, "Good"),
	(5, "Excellent!"),
	)	
  num_stars = models.IntegerField(choices = rating)  //create a list for rating
  
  def  __str_(self):
		return self.name + " Rating: "+ str(self.num_stars)
		
		

step-2: Table Generate
----------
//create table

	python  manage.py  migrate

//connect models with amphibious application

	python  manage.py  makemigrations  amphibious

//now again run table create command

	python  manage.py  migrate

if any kind of change happen in table, we need to run above 3 command



///use of null, blank/////////////////////
------------------------------------------
1. null : by default null = false.  we can set "null=True", if user not given this field value, it automatically set  "null"
2. blank : by default blank value is True (required field). blank = False (required field)

class Album(models.Model):
	first_name = models.CharField(max_length=50)   //by default null = False
	first_name = models.CharField(max_length=50, null=True)   
	first_name = models.CharField(max_length=50, blank=True) 



////////////For More help/////////////////////////////////////////////////////

from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=100)
    image = models.ImageField(upload_to='images/')
    publication_date = models.DateField()
    price = models.DecimalField(max_digits=5, decimal_places=2)

    def __str__(self):
        return self.title



In this example, the Book model has four fields: title, author, publication_date, and price. The CharField and DateField are used for text and date fields, respectively, and the DecimalField is used for decimal fields. The max_length parameter is used to specify the maximum length of a text field, and the max_digits and decimal_places parameters are used to specify the maximum number of digits and the number of decimal places for a decimal field, respectively. The __str__ method is used to define a string representation of the model that can be used for display purposes.

Once you have defined your models, you need to run migrations to create the corresponding tables in the database. In Django, you can run migrations using the following command:

python manage.py makemigrations
python manage.py migrate


