My_Ecom_Project
|----App_Login
|----App_Shop
|----App_Order
|----App_Payment
|----media
|      |---Products
|      |---Profile_pic
|----static
|      |---css
|      |---js
|----templates
|      |---App_Login
|      |---App_Shop
|      |---App_Order
|      |---App_Payment
|      |---Layouts
|      |    |---master.html
|      |---inc
|           |---navbar.html
|----My_Ecom_Project
|----db.sqlite3
|----manage.py


///////Befor migration//////////////////////

//////Step-1: we will create some custom model in models.py of App_Login///////////////////////////////////////////////////////////////


models.py of App_Login
-------------------

from django.db import models

#To Create a Custom User Model and Admin Panel
from django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionMixin
from django.utils.translation import ugettext_lazy

#To automatically create userprofile
from django.bd.models.signals import post_save
from django.dispatch import receiver


# Create your models here.

class MyUserManager(BaseUserManager):
	def _create_user(self, email, password, **extra_fields):
		if not email:
			raise ValueError("The Email must be set!")

		email = self.normalize_email(email)
		user = self.model(email=email, **extra_fields)
		user.set_password(password)
		user.save(using=self._db)
		return user

	def create_superuser(self, email, password, **extra_fields):
  
		extra_fields.setdefault('is_staff', True)
		extra_fields.setdefault('is_superuser', True)
		extra_fields.setdefault('is_active', True)
		
		if extra_fields.get('is_staff') is not True:
			raise ValueError('Superuser must have is_staff=True')
		if extra_fields.get('is_superuser') is not True:
			raise ValueError('Superuser must have is_superuser=True')
		return self._create_user(email, password, **extra_fields)


class User(AbstractBaseUser, PermissionMixin):
	email = models.EmailField(unique=True, null=False)
	is_staff = models.BooleanField(
	   ugettext_lazy('staff status'),
	   default=False,
	   help_text = ugettext_lazy('Designates whether the user can log in this site')
	)
	
	is_active = models.BooleanField(
	   ugettext_lazy('active'),
	   default=True,
	   help_text=ugettext_lazy('Designates whether this user should be treated as active. Unselect this instead of deleting accounts')
	)

	USERNAME_FIELD = 'email'
	objects = MyUserManager()

	def __str__(self):
		return self.email

	def get_full_name(self):
		return self.email

	def get_short_name(self):
		return self.email

class Profile(models.Model):
	user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
	username = models.CharField(max_length=255, blank=True)
	full_name = models.CharField(max_length=255, blank=True)
	address_1 = models.TextField(max_length=300, blank=True)
	city = models.CharField(max_length=40, blank=True)
	zipcode = models.CharField(max_length=10, blank=True)
	country = models.CharField(max_length=50, blank=True)
	phone = models.CharField(max_length=20, blank=True)
	created_at = models.DateTimeField(auto_now_add=Tue)
	updated_at = models.DateTimeField(auto_now)

	def __str__(self):
		return self.username + "'s Profile"

	def is_fully_filled(self):
		fields_name = [f.name for f in self._meta.get_fields()]
		for field_name in fields_names:
			value = getattr(self, field_name)
			if value is none or value=='':
				return False
		return True


@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
	if created:
		profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_profile(sender, instance, **kwargs):
	instance.profile.save()

//////////////////////////////Step-2: Table Registration /////////////////////////////////////////////////
in admin.py
--------------
from django.contrib import admin
from App_Login.models import User, Profile

# Register your  models here.

admin.site.register(User)
admin.site.register(Profile)

/////////////////////////////Step-3: Configuration ///////////////////////////////////////////////
in settings.py, add below line 
----------------
AUTH_USER_MODEL = 'App_Login.User'

////////////////////////Step-4: Migration ///////////////////////////////////////////////////

py manage.py makemigrations App_Login
py manage.py migrate

/////////////////////////Step-5: Create a super user///////////////////////////////////////////////
py manage.py createsuperuser
Email: admin@gmail.com
Password: abc@123456789
Password (again): abc@123456789
Bypass password validation and create user anyway? [y/N]:y

/////////////////////////Step-6: Run Server and Login admin panel//////////////////////
py manage.py runserver
