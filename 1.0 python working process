models.py of App_Login
------------
class UserProfile(models.Model):
	user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='user_profile')
	profile_pic = models.ImageField(upload_to='profile_pics', blank=True)
	description = models.TextField(blank=True)
	dob = models.DateField(blank=True, null=True)
	website = models.URLField(blank=True)
	facebook = models.URLField(blank=True)

class Follow(models.Model):
	follower = models.Foreignkey(User, on_delete=models.CASCADE, related_name='follower')
	following = models.Foreignkey(User, on_delete=models.CASCADE, related_name='following')
	created_at = models.DateTimeField(auto_now_add=True)


models.py of App_Post
------------
class Post(models.Model):
	author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="user_post")
	image = models.ImageField(upload_to='post_images')
	caption = models.CharField(max_length=255, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)
	class Meta:
		ordering = ['-created_at',]

class Like(models.Model):
	post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='liked_post')
	user = models.ForeignKey(User, on_delete=models.CASACADE, related_name='post_liker')
	created_at = models.DateTimeField(auto_now_add=True)

	def _str_(self):
		return '{} : {}'.format(self.user, self.post)

forms.py
----------
class EditProfile(forms.ModelForm):
	dod = forms.DateField(widget=forms.TextInput(attrs={'type':'date'}))
	class Meta:
		model = UserProfile
		exclude = ['user',]   //we will show all field except user id field

templates
|---App_Login
|---App_Blog
|---navbar.html
|---master.html
|
|


in views.py
-----------------
@login_required
def home(request):
	title = 'Home'
	if request.method == 'GET':
		search = request.GET.get('search', '')  //need a blank space
		search_result = User.objects.filter(username__icontains = search)
	data ={
	  'title':title,
	   'searchword':search,
	   'search_result':search_result,
	}
	return render(request, 'App_Posts/home.html', context=data)

@login_required
def follow(request, username):
	following_user = User.objects.get(username=username)
	follower_user = request.user
	already_followed = Follow.objects.filter(follower=follower_user, following=following_user)
	if not already_followed:
		followObj = Follow(follower=follower_user, following=following_user)
		followObj.save()
	return HttpResponseRedirect(reverse('App_Login:user', kwargs={'username':username}))

@login_required
def unfollow(request, username):
	following_user = User.objects.get(username=username)
	follower_user = request.user
	already_followed = Follow.objects.filter(follower=follower_user, following=following_user)
	already_followed.delete()
	return HttpResponseRedirect(reverse('App_Login:user', kwargs={'username':username}))


in urls.py
------------
path('user/<username>/', views.user, name='user'),


in HTML Page
-------------------
{% if user.user_profile.profile_pic %}
<img src="{{user.user_profile.profile_pic}}" width="40px" class="">
{% endif %}

Username: {{user.username}}
Name: {{user.first_name}} {{user.last_name}}
Total Post: {{user.user_post.count}}
<h4>{{user.user_post.count}} posts &nbsp;&nbsp; {{user.following.count}} followers &nbsp;&nbsp; {{user.follower.count}} following</h4>
<div class="row">
{% for post in user.user_post.all %}
   <img src="/media/{{post.image}}" title="{{post.caption}}">
{% endfor %}
</div>
{% block css_block %}
  <style>
    .imagestyle{width:150px;padding:5px;border:1px solid #000; margin: 5px 5px 5px 5px;}
  </style>
{% endblock %}


////////////////////////////////////////////////////////////////////////////////////////////

{% if post.pk  in  liked_post_list %}

{% endif %}

////////////////////////////////////////////////////////////////////////////////////////////




////////by using relatedname of table, show user's all post////////////////////////////////////

1. find user of that table
2. dot
3. relation of this use with particular table
4. dot
5. table column name
syntax:  find user of that table.relation of this use with particular table.table column name
               --------------------------- . -------------------------------------------------- . ------------------------
	f.following(follow table relatedname).user_post(post table relatedname).post-table-column_name

{% for   f   in   following_list %}
  {% for p in f.following.user_post.all %}     //user of follow table relatedname.post table relatedname.all

     {{p.author}}
      <br>
     <img src="/media/{{p.image}}" width="100%">

  {% endfor %}
{% endfor %}










Browser (request)   =====> urls.py (route)
	/\			||
	||			||
	||	        	\/
	===response======< views.py (controller)


-------------------- Part 1  ----------------------------------------------------------------------------------------------------------
//////Step-1: Basic Project Structure///////////////////////////////////////////////////
woodyengineering
	|
	WoodyEngineering
		|
		| __pycache__(folder)
		|
		| __init__.py
		| settings.py (config file)
		| urls.py  (route file)
		| wsgi.py


///////Step-2: Add an application named "amphibious" in  woodyengineering/////////////


woodyengineering
	|
	amphibious
	|	|
	|	migration (folder)
	|	|
	|	|__init__.py
	|	| admin.py
	|	| apps.py
	|	| models.py
	|	| tests.py
	|	| views.py (controller)
	|
	woodyengineering
		|
		| __pycache__(folder)
		|
		| __init__.py
		| settings.py (config file)
		| urls.py  (route file)
		| wsgi.py


////Step-3: use controller///////////////////////////////////////////////////////////

in views.py (controller)       of your application (amphibious)
---------------------
from  django.shortcuts  import  render
from  django.http  import  HttpResponse

//function index
def  index(request):
	return HttpResponse("This is home page <a href='/contact'>Contact</a>")

//function contact
def contact(request):
	return HttpResponse("This is contact page <a href='/'>Home</a>")


/////Step-4: route (main route)///////////////////////////////////////////////////////

in urls.py           of main project (woodyengineering)
----------------------
from  django.contrib  import  admin
from  django.urls  import  path
from  first_app  import  views   //add views_controller in route

//write all route in urlpattern
urlpatterns = [
	path('admin/', admin.site.urls),
	path('index/', views.index, name='index'),      //path('url', controllername.functionname, name='routename')
	path('home/', views.index, name='index'), 
	path('', views.index, name='index'), 
	path('contact/', views.contact, name='contact'),
]





-------------------------------Part 2 -----------------------------------------------------------------------------------------------------------



//////Create different route for each application name /////////////////////////////////////

1. create a file for route named as "urls.py" in amphibious (application)

woodyengineering
	|
	amphibious
	|	|
	|	migration (folder)
	|	|
	|	|__init__.py
	|	| admin.py
	|	| apps.py
	|	| models.py
	|	| tests.py
	|	| urls.py  (route file)   //use for amphibious
	|	| views.py (controller) //use for amphibious
	|
	woodyengineering
		|
		| __pycache__(folder)
		|
		| __init__.py
		| settings.py (config file)
		| urls.py  (route file)
		| wsgi.py

2. connect application route in main route/////////////////////////////////

in urls.py           of main project (woodyengineering)
----------------------
from  django.contrib  import  admin
from  django.urls  import  path
from  django.conf.urls  import  include   //import include for url connection

urlpatterns = [
	path('admin/', admin.site.urls),
	path('amphibious/',  include('amphibious.urls')),   //connect route
]


3. now write all route related with amphibious application in ---> amphibious/urls.py////////

in urls.py   of amphibious
_________

from  django.conf.urls  import  url
from  django.urls  import   path
from  amphibious  import  views   // contoller

app_name = "amphibious"  //relative url

urlpatterns =[
	path('',  views.index,  name='index'),
	path('/aboutus/',  views.aboutus,  name='aboutus'),
]




-----------------Part 3 ------------------------------------------------------------------------------------------------------------------------


////// now write function in "views" controller of amphibious///////////////////////



------------------ Part 4 ----------------------------------------------------------------------------------------------------------------------

///////////////////Step-5: Templates ////////////////////////////////////////////////////////////////////////////
step-a:
---------
1. create a folder in main project (woodyengineering) name as "templates"
2. create one folder for each application. for example we will create a folder
     name as "amphibious"
3. now, we will create all files and folders related with views of "amphibious" in
    this folder. for home page, create a file "index.html"

	woodyengineering
	|
	|------static(folder)
	|	|---css(folder)
	|	|---js
	|	|---images
	|-----------amphibious(application folder)
	|		|------urls.py(route file)
	|		|------view.py (controller file)
	|
	|-----------steelfabrication(application folder)
	|-----------woodyboats(application folder)
	|
	|-----------templates(views folder)  
	|              	|------amphibious
	|		|	|----index.html
	|		|------steelfabrication
	|		|------woodyboats
	|
	|------------woodyengineering(main project)
			|
			|-----urls.py (main route file)
			|-----settings.py(config file)

step-b : remplate registration
--------------------------------
connect "templates" folder in "settings.py" of main project

1. open settings.py
2. create a variable "TEMPLATES_DIR" with path under "BASE_DIR"
                                                      ---------

	TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
	

3. "TEMPLATES_DIR" add in "DIRS of TEMPLATES[ ]" dictionary
                          ----------------------      

	'DIRS':  [TEMPLATES_DIR,],


4. now, go to views.py (controller of amphibious) and write below code to show html file as view page

    views.py (controller)
----------------------------
	from  django.shortcuts  import render
	from  django.http  import HttpResponse
	
	def index(request):
		//diction = {} // templates folder path
		diction = {'text_1': 'I am a text sent from views.py'} // we can pass data by context
		return render(request, 'amphibious/index.html', context =diction)

index.html     in amphibious
-------------------------------------
	<html>
	   <head>
		<title>Amphibious</title>
	  </head>
	  <body>
		<h1> home page of amphibious </h1>
		<a href="{% url  'amphibious:index'  %}">Home</a>  //relative url

		{{ text_1 }}

	  </body>
	</html>
	

//////////////////////Image, css, js, font,.... add in html///////////////////////////////////////////////////
step:1
we will create a folder "static" in main project (woodyengineering).

	static --> "images"
	static --> "css"
	static --> "js" 

	static --> images --> amphibious
	static --> images --> steelfabrication
	static --> images --> woodyboats

	static --> css --> amphibious
	static --> js --> steelfabrication
	static --> font --> woodyboats

step:2
//connect "statice" folder in settings.py (main project)
---------------------------------------------------------------------------------------------------

	STATIC_DIR = os.path.join(BASE_DIR, 'static')

//add in "STATIC_URL"      //if STATICFILES_DIRS[ ] not exist create it
---------------------------------------------------------------------------------------------------
	
	STATIC_URL  =  '/static'
	STATICFILES_DIRS  = [
		STATIC_DIR, 
	]
	
//in index.html (amphibious), add image, css, js
-----------------------------------------------------------------------------------------------------
	
	<!DOCTYPE html>
	{% load   staticfiles %}                     //to load image, css, js from static folder
	<html>
	   <head>
		<title>Amphibious</title>
		
		<link rel="stylesheet" href="{% static "css/amphibious/style1.css"%}">
		<script src="{% static "css/amphibious/style1.js"%}"></script>

	  </head>
	  <body>
		<h1> home page of amphibious </h1>

		{{ text_1 }}
		
		<img  src ="{%  static  "images/amphibious/slider.jpg"%}">
	  </body>
	</html>



